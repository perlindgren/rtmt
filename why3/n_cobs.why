module NestedCobs

  use int.Int
  use int.Abs
  use list.List
  use list.NthNoOpt
  use list.Length
  use list.Append
  use list.Mem
  use int.ComputerDivision

  let rec function rec_decode (cl: list int) : (int, list int)
    requires { cl <> Nil }
    variant { cl }
  = match cl with
    | Nil -> absurd
    | Cons cn Nil -> (cn, Nil)
    | Cons cn cll ->
      let dn, dl = rec_decode cll in 
      if dn = 1 then (cn, Cons 0 dl)
      else ((if dn > 0 then dn - 1 else dn + 1), Cons cn dl) 
    end
         
  let rec function rec_encode (pn: int) (pl: list int) : list int
    requires { pn <> 0 }
    variant { pl } 
    ensures { result <> Nil }
    ensures { length result = 1 + length pl }
    ensures { not (mem 0 result) }
    ensures { 
      let dn, dl = rec_decode result in
      (dn = pn) /\ (dl = pl)
    } 
  = match pl with
    | Nil -> Cons pn Nil
    | Cons e pll ->
      if e = 0 then Cons pn (rec_encode 1 pll)
      else if pn > 0 then Cons e (rec_encode (pn + 1) pll)
      else if pn < 0 then Cons e (rec_encode (pn - 1) pll) 
      else absurd
    end 
    
  let rec function strip_end (l: list int) : list int
    requires {
      l <> Nil
    }
    variant { l }
  = match l with
    | Nil -> absurd
    | Cons _ Nil -> Nil
    | Cons e ll -> Cons e (strip_end ll)
    end
      
  (* extractable interface *)
  let function encode (l: list int) : list int
  = let cl = rec_encode (-1) l in
    cl ++ (Cons 0 Nil)
    
  (* extractable interface *)
  let function decode (l: list int) : list int
    requires { length l > 1 }
  = let _, r = rec_decode (strip_end l) in r
  

  (* why3 execute n_cobs.why --use=NestedCobs 'test_encode ()' *)

  let rec gen_a (n: int): list int
    requires { n >=0 }
    variant { n }
  = if n = 0 then 
      Nil
    else 
      Cons 41 (gen_a (n - 1))

  let rec gen_a0 (n: int) (m: int): list int
    requires { n >=0 /\ m <> 0 }
    variant { n }
  = if n = 0 then 
      Nil
    else 
      Cons (if mod n m = 0 then 0 else 41) (gen_a0 (n - 1) m)

  let test (l: list int)
  = l, encode l, decode (encode l)
  
  let test_encode_a (n:int) 
    requires { n >= 0 }
  = test (gen_a n)

  let test_encode_0a (n:int) 
    requires { n >= 0 }
  = Cons 0 (gen_a n), encode (Cons 0 (gen_a n)) 

  let test_encode_am (n:int) (m:int)
    requires { n >= 0 /\ m <> 0 }
  = test (gen_a0 n m)

  let test_encode_0am (n:int) (m:int)
    requires { n >= 0 /\ m <> 0 }
  = encode (Cons 0 (gen_a0 n m)) 

  let test_mod (n: int) (m:int)
    requires { n >= 0 /\ m <> 0 }
  = mod n m


  (* encoding examples *)
  let t ()
  = rec_encode (-1) (Cons 41 Nil)
  
  let t2 ()
  = rec_decode (rec_encode (-1) (Cons 41 (Cons 42 Nil)))
  
  let t3 ()
  = rec_decode (rec_encode (-1) (Cons 0 Nil))

  let t4 ()
  = rec_decode (rec_encode (-1) (Cons 41 (Cons 0 Nil)))
  
  let t5 ()
  = rec_decode (rec_encode (-1) (Cons 0 (Cons 0 Nil)))
  
  let t6 ()
  = rec_decode (rec_encode (-1) (Cons 0 (Cons 41 (Cons 0 Nil))))
  
  let t7 ()
  = rec_decode (rec_encode (-1) (Cons 41 (Cons 42 (Cons 43 (Cons 41 (Cons 0 Nil))))))
end