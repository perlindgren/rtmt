module NestedCobs

  use int.Int
  use int.Abs
  use list.ListRich

  (*
  (Cons 0 Nil) (-1) -> (Cons (-1) (Cons 1 Nil))
  (Cons 41 Nil) (-1) -> (Cons 41 (Cons (-2) Nil))
  *)
  (* specification *)
  inductive n_cobs (plain: list int) (n: int) (coded: (list int)) =
  | End:      forall n. n <> 0 -> 
                n_cobs Nil n (Cons 0 Nil) 
  | Zero:     forall pl cl: list int, cn:int. n_cobs pl cn cl -> 
                n_cobs (Cons 0 pl) (-1) (Cons cn cl)
                (*
  | NonZero:  forall pl cl: list int, cn e:int. e <> 0 -> cn < 0 -> n_cobs pl cn cl -> 
                n_cobs (Cons e pl) (cn + 1) (Cons cn cl) 
  | NonZero2: forall pl cl: list int, cn e:int. e <> 0 -> cn > 1 -> n_cobs pl cn cl -> 
                n_cobs (Cons e pl) (cn - 1) (Cons cn cl) 
                *)
  
  predicate non_nil (l: list int) =
    l <> Nil
    
  predicate non_zero (l: list int) =
    not (mem 0 l)
  
  let rec function rec_encode (l: list int) (n: int): list int
    requires { n <> 0 }
    variant { l }
    ensures { 
      (* (n_cobs l n result) /\ *)
      (non_nil result) /\ 
      (non_zero result) 
    }
  = match l with
    | Nil -> Cons n Nil
    | Cons e ll ->
      if e = 0 then
        let r = rec_encode ll 1 in
        Cons n r
      else 
        let prev = if n < 0 then n - 1 else n + 1 in
        let r = rec_encode ll prev in
        Cons e r
    end
    
  lemma encode_unique:
    forall l, r1, r2. r1 = rec_encode l -> r2 = rec_encode l -> r1 = r2
      
  let rec function rec_decode (l: list int): (list int, int) 
    requires { 
      (non_nil l) 
    }
    variant { l } 
  = match l with
    | Nil -> absurd 
    | Cons n Nil -> (Nil, n)
    | Cons n ll ->
      let (dl, d) = rec_decode ll in
      if d = -1 then
        (dl, d)
      else if d = 1 then
        (Cons 0 dl, n) 
      else 
        let prev = if d > 0 then d - 1 else d + 1 in
        (Cons n dl, prev)
    end
    
  lemma decode_unique:
    forall l, r1, r2. r1 = rec_decode l -> r2 = rec_decode l -> r1 = r2
    
  goal invert:
    forall l [@induction] r [@induction] rr: list int, n. 
      r = rec_encode l (-1) ->
        (rr, n) = rec_decode r ->
          l = rr 
      

  (* why3 execute n_cobs.why --use=NestedCobs 'test_encode ()' *)
  let test_encode() =
    rec_encode Nil (-1)

  let test_encode_41() =
    rec_encode (Cons 41 Nil) (-1) 

  let test_encode_41_42_43() =
    rec_encode (Cons 41 (Cons 42 (Cons 43 Nil))) (-1) 

  (*
  (Cons 0 Nil) (-1) -> (Cons (-1) (Cons 1 Nil))
  *)
  let test_encode_0 () =
    rec_encode (Cons 0 Nil) (-1) 

  let test_encode_41_0_42 () =
    rec_encode (Cons 41 (Cons 0 (Cons 42 Nil))) (-1) 

  let test () =
    rec_decode(test_encode () ) 

  let test_41 () =
    rec_decode(test_encode_41 ())

  let test_41_42_43 () =
    rec_decode(test_encode_41_42_43 ())

  let test_0 () =
    rec_decode(test_encode_0 ())

  let test_41_0_42 () =
    rec_decode(test_encode_41_0_42 ())

end